{"version":3,"file":"main.befa1bf080285abbdde9.hot-update.js","sources":["webpack:///src/Event/EventForm.js"],"sourcesContent":["import Slider from 'rc-slider'\nimport { DateTime } from 'luxon'\nimport {toLower} from 'ramda'\nimport Flatpickr from 'react-flatpickr'\nimport { Form, Label, Input, Button, Container, Row, Col } from 'reactstrap'\n\nimport 'rc-slider/assets/index.css'\n\nimport Option from '../common/LowerOption'\n\nconst StyContainer = styled(Container)`\n  background-color: #fff;\n\n  h3.text-primary {\n    margin-top: 1em;\n  }\n`\n\nconst DatePicker = styled(Flatpickr)`\n  &,\n  &:read-only {\n    background-color: #fff;\n  }\n`\n\nconst Range = Slider.createSliderWithTooltip(Slider.Range)\n\nclass EventForm extends React.Component {\n  state = Object.assign(\n    {\n      date: DateTime.local()\n        .plus({ day: 1 })\n        .startOf('day')\n        .toJSDate(),\n      budget: [0, 50000],\n      location: toLower(this.props.locations[0]),\n      guests: '0',\n      category: 'conference halls',\n      catering: false\n    },\n    this.props.initialData,\n    this.props.initialData.date && {\n      date: DateTime.fromMillis(+this.props.initialData.date).toJSDate()\n    }\n  )\n\n  valChange = name => e => {\n    this.stateSet({ [name]: e.target.value })\n  }\n\n  stateSet = state =>\n    this.setState(prev => {\n      const next = state instanceof Function ? state(prev) : state\n      this.props.onChange(Object.assign({}, prev, next))\n      return next\n    })\n\n  render () {\n    const { valChange } = this\n    return (\n      <Form>\n        <StyContainer>\n          <h3 className='text-primary'>EVENT DETAILS</h3>\n          <Row>\n            <Col>\n              <Label for='city'>Location</Label>\n              <Input\n                type='select'\n                placeholder='City'\n                id='location'\n                value={this.state.location}\n                onChange={valChange('location')}>\n                {this.props.locations.map((e, i) => (\n                  <Option key={i}>{e}</Option>\n                ))}\n              </Input>\n            </Col>\n            <Col>\n              <Label for='guests'>Guests</Label>\n              <Input\n                type='number'\n                step={5}\n                min={0}\n                max={50000}\n                id='guests'\n                placeholder='Guest Count'\n                value={this.state.guests}\n                onChange={valChange('guests')}\n              />\n            </Col>\n            <Col>\n              <Label for='event'>Category</Label>\n              <Input\n                type='select'\n                id='event'\n                placeholder='Event'\n                value={this.state.event}\n                onChange={valChange('event')}>\n                {this.props.tags.map(e => (\n                  <Option key={e._id}>{e.name}</Option>\n                ))}\n              </Input>\n            </Col>\n            <Col>\n              <Label for='date'>Date & Time</Label>\n              <DatePicker\n                id='date'\n                value={this.state.date}\n                onChange={([date]) => this.stateSet({ date })}\n                className='form-control'\n                options={{\n                  minuteIncrement: 30,\n                  dateFormat: 'd M Y',\n                  minDate: DateTime.local()\n                    .endOf('day')\n                    .toJSDate()\n                }}\n              />\n            </Col>\n            <Col sm='2'>\n              <Label for='catering'>Catering</Label>\n              <Button\n                color='secondary'\n                id='catering'\n                className='d-block'\n                outline={!this.state.catering}\n                onClick={e => this.stateSet(p => ({ catering: !p.catering }))}>\n                {this.state.catering ? 'Required' : 'Not required'}\n              </Button>\n            </Col>\n          </Row>\n          <Row className='my-2'>\n            <Col>\n              <Label for='budget'>Budget</Label>\n              <Range\n                id='budget'\n                min={0}\n                max={200000}\n                step={1000}\n                value={this.state.budget}\n                onChange={budget => this.stateSet({ budget })}\n              />\n            </Col>\n          </Row>\n        </StyContainer>\n      </Form>\n    )\n  }\n\n  componentDidMount () {\n    this.props.onChange(this.state)\n  }\n\n  static propTypes = {\n    initialData: PropTypes.object,\n    onChange: PropTypes.func,\n    tags: PropTypes.arrayOf(PropTypes.object),\n    locations: PropTypes.arrayOf(PropTypes.string)\n  }\n}\nexport default EventForm\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAMA;AACA;AACA;;;;;;;;;;;;;;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AATA;AAaA;AADA;AAKA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AALA;;;;;AAOA;AAAA;AACA;AADA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AANA;AAFA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAFA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AANA;AAFA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AALA;AAAA;AAAA;AAAA;AAAA;AAFA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAMA;AANA;AAFA;AAxDA;AAoEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAtEA;AADA;AAuFA;;;AAEA;AACA;AACA;;;;AA5HA;AACA;AADA;AA+HA;AACA;AACA;AACA;AAJA;AACA;AAMA;;;;;A","sourceRoot":""}